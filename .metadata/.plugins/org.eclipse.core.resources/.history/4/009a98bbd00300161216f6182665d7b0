import xml.etree.ElementTree as et
    

class QuickSort:
    def __init__(self):
        self.array = self.parser()
    
    def qsort(self,left,right):
        if left<right:
            splitPoint = self.partition(left, right) 
            #print splitPoint       
            #introduce concurrency here
            #self.qsort(left, splitPoint-1)
            #self.qsort(splitPoint+1, right)
        
        
    def parser(self):
        #parsing from the xml file
        tree = et.parse("array.xml")
        root = tree.getroot()
        array = []
               
        for child in root:
            array.append(int(child.text))
        
        return array
    
    def swap(self,index1, index2):
        temp = self.array[index1]
        self.array[index1] = self.array[index2]
        self.array[index2] = temp
    
    def partition(self, left, right):
        print left,right
        pivotindex = left + (right - left)/2
        pivot = self.array[pivotindex]
        print pivot
        '''taking middle element as pivot
        can also be the first, the last or 
        the median of first, last and middle'''
        
        '''for pivot = array[left]
        leftmark = left+1
        rightmark = right
        
        for pivot = array[right]
        leftmark = left
        rightmark = right - 1
        ''' 
                
        while left < right:
            while self.array[left]<=pivot:
                print "In while"
                left = left + 1
                print self.array[left],self.array[right]
            
            print "breaking"
                
            while self.array[right]>=pivot:
                print "in while"
                right = right - 1
                print self.array[left],self.array[right]
                
            print "breaking"
                
            if left < right:
                self.swap(left, right)
                
            
        print "gottcha"        
        self.swap(right, pivotindex)
        
        return right
                
qsort = QuickSort()
print qsort.array
qsort.qsort(0, len(qsort.array)-1)
       
            
        
        
        
    
    